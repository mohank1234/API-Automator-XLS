{"version":3,"file":"index.js","names":["_allureJsCommons","require","_reporter","_utils","_excluded","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_classPrivateMethodInitSpec","a","_checkPrivateRedeclaration","add","has","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_assertClassBrand","_AllureReporter_brand","WeakSet","AllureReporter","constructor","emitter","reporterConfig","options","Map","resultsDir","restConfig","currentCollection","collection","rootCollectionName","name","allureConfig","allureRuntime","ReporterRuntime","writer","createDefaultWriter","registerEvents","on","onStart","bind","onBeforeItem","onItem","onPrerequest","onRequest","onTest","onAssertion","onConsole","onDone","currentScope","startScope","err","args","_args$executions$","currentTest","currentPmItem","pmItemsByAllureUuid","get","prerequest","executions","script","exec","join","pmItem","item","passed","failedAssertions","consoleLogs","itemGroup","parent","fullName","_getFullName","testPath","_pathToItem","hostLabel","getHostLabel","threadLabel","getThreadLabel","labels","links","extractMeta","events","startTest","titlePath","stage","Stage","RUNNING","getLanguageLabel","getFrameworkLabel","getEnvironmentLabels","updateTest","test","getSuiteLabels","set","_requestData$headers","_requestData$body","_response$headers","requestData","requestDataURL","concat","method","url","rawDescription","request","description","testDescription","content","response","responseData","requestError","_attachString","testScript","headers","count","writeAttachment","undefined","_headerListToJsonBuffer","contentType","ContentType","JSON","body","mode","raw","Buffer","from","TEXT","parameters","code","toString","excluded","descriptionHtml","replace","details","_escape","status","Status","FAILED","FINISHED","statusDetails","message","trace","errorMsg","BROKEN","PASSED","stopTest","writeTest","_args$executions$2","execScript","testArgs","error","errName","errMsg","stepUuid","startStep","stopStep","level","messages","_args$response","req","respStream","stream","respBody","assertion","updateStep","step","stack","writeScope","forEachParent","chain","unshift","id","stringToAttach","Array","isArray","ret","all","h","key","stringify","val","_default","exports","default","module"],"sources":["../../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\nimport type { EventEmitter } from \"events\";\nimport type { ConsoleEvent, Cursor, NewmanRunExecutionAssertion } from \"newman\";\nimport type { CollectionDefinition, Event, HeaderList, Item, Request, Response } from \"postman-collection\";\nimport { ContentType, Stage, Status } from \"allure-js-commons\";\nimport type { ReporterConfig } from \"allure-js-commons/sdk/reporter\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getSuiteLabels,\n  getThreadLabel,\n} from \"allure-js-commons/sdk/reporter\";\nimport type { PmItem, RunningItem } from \"./model.js\";\nimport { extractMeta } from \"./utils.js\";\n\nclass AllureReporter {\n  allureRuntime: ReporterRuntime;\n  allureConfig: ReporterConfig;\n  runningItems: RunningItem[] = [];\n  currentCollection: CollectionDefinition;\n  pmItemsByAllureUuid: Map<string, PmItem> = new Map();\n  currentTest?: string;\n  currentScope?: string;\n  rootCollectionName?: string;\n\n  constructor(\n    emitter: EventEmitter,\n    reporterConfig: ReporterConfig,\n    options: {\n      collection: CollectionDefinition;\n    },\n  ) {\n    const { resultsDir, ...restConfig } = reporterConfig;\n\n    this.currentCollection = options.collection;\n    this.rootCollectionName = options.collection.name;\n    this.allureConfig = reporterConfig;\n    this.allureRuntime = new ReporterRuntime({\n      ...restConfig,\n      writer: createDefaultWriter({ resultsDir, emitter }),\n    });\n    this.registerEvents(emitter);\n  }\n\n  registerEvents(emitter: EventEmitter) {\n    emitter.on(\"start\", this.onStart.bind(this));\n    emitter.on(\"beforeItem\", this.onBeforeItem.bind(this));\n    emitter.on(\"item\", this.onItem.bind(this));\n    emitter.on(\"prerequest\", this.onPrerequest.bind(this));\n    emitter.on(\"request\", this.onRequest.bind(this));\n    emitter.on(\"test\", this.onTest.bind(this));\n    emitter.on(\"assertion\", this.onAssertion.bind(this));\n    emitter.on(\"console\", this.onConsole.bind(this));\n    emitter.on(\"done\", this.onDone.bind(this));\n  }\n\n  onStart() {\n    this.currentScope = this.allureRuntime.startScope();\n  }\n\n  onPrerequest(\n    err: any,\n    args: {\n      executions: Event[];\n    },\n  ) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    currentPmItem.prerequest = args.executions[0]?.script?.exec?.join(\"\\n\");\n  }\n\n  onBeforeItem(err: any, args: { item: Item; cursor: Cursor }) {\n    const pmItem: PmItem = {\n      name: args.item.name,\n      passed: true,\n      failedAssertions: [],\n      consoleLogs: [],\n    };\n    const itemGroup = args.item.parent();\n    const item = args.item;\n    const fullName = this.#getFullName(item);\n    const testPath = this.#pathToItem(item);\n    const hostLabel = getHostLabel();\n    const threadLabel = getThreadLabel();\n    const { labels, links } = extractMeta(args.item.events);\n\n    this.currentTest = this.allureRuntime.startTest({\n      name: args.item.name,\n      fullName,\n      titlePath: testPath,\n      stage: Stage.RUNNING,\n      labels: [\n        getLanguageLabel(),\n        getFrameworkLabel(\"newman\"),\n        hostLabel,\n        threadLabel,\n        ...labels,\n        ...getEnvironmentLabels(),\n      ],\n      links,\n    });\n\n    this.allureRuntime.updateTest(this.currentTest, (test) => {\n      test.labels.push(...getSuiteLabels(testPath));\n    });\n\n    this.pmItemsByAllureUuid.set(this.currentTest, pmItem);\n\n    if (itemGroup && this.currentCollection !== itemGroup) {\n      this.currentCollection = itemGroup;\n    }\n  }\n\n  onItem(\n    err: any,\n    args: {\n      item: Item;\n    },\n  ) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const requestData = currentPmItem.requestData;\n    const requestDataURL = requestData && `${requestData.method} - ${requestData.url}`;\n    const rawDescription = args.item.request.description;\n    const testDescription = (typeof rawDescription === \"string\" ? rawDescription : rawDescription?.content) || \"\";\n    const response = currentPmItem.responseData;\n    const failedAssertions = currentPmItem.failedAssertions;\n    const requestError = currentPmItem.requestError;\n\n    if (currentPmItem.prerequest) {\n      this.#attachString(\"PreRequest\", currentPmItem.prerequest);\n    }\n\n    if (currentPmItem.testScript) {\n      this.#attachString(\"TestScript\", currentPmItem.testScript);\n    }\n\n    if (currentPmItem.consoleLogs.length) {\n      this.#attachString(\"ConsoleLogs\", currentPmItem.consoleLogs);\n    }\n\n    if (requestData?.headers && requestData?.headers?.count() > 0) {\n      this.allureRuntime.writeAttachment(\n        this.currentTest,\n        undefined,\n        \"Request Headers\",\n        this.#headerListToJsonBuffer(requestData.headers),\n        {\n          contentType: ContentType.JSON,\n        },\n      );\n    }\n\n    if (requestData?.body?.mode === \"raw\" && requestData.body.raw) {\n      this.#attachString(\"Request Body\", requestData.body.raw);\n    }\n\n    if (response?.headers && response?.headers?.count() > 0) {\n      this.allureRuntime.writeAttachment(\n        this.currentTest,\n        undefined,\n        \"Response Headers\",\n        this.#headerListToJsonBuffer(response.headers),\n        {\n          contentType: ContentType.JSON,\n        },\n      );\n    }\n\n    if (response?.body) {\n      this.allureRuntime.writeAttachment(\n        this.currentTest,\n        undefined,\n        \"Response Body\",\n        Buffer.from(response.body, \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    this.allureRuntime.updateTest(this.currentTest, (test) => {\n      if (requestDataURL) {\n        test.parameters.push({\n          name: \"Request\",\n          value: requestDataURL,\n        });\n      }\n\n      if (response?.code) {\n        test.parameters.push({\n          name: \"Response Code\",\n          value: response?.code.toString(),\n          excluded: true,\n        });\n      }\n\n      if (testDescription) {\n        const descriptionHtml = testDescription.replace(/[*]/g, \"\").replace(/\\n/g, \"<br>\");\n\n        test.description = testDescription;\n        test.descriptionHtml = descriptionHtml;\n      }\n    });\n\n    if (response && failedAssertions?.length) {\n      const details = this.#escape(`Response code: ${response.code}, status: ${response.status}`);\n\n      this.allureRuntime.updateTest(this.currentTest, (test) => {\n        test.status = Status.FAILED;\n        test.stage = Stage.FINISHED;\n        test.statusDetails = {\n          message: this.#escape(failedAssertions.join(\", \")),\n          trace: details,\n        };\n      });\n    } else if (requestError) {\n      const errorMsg = this.#escape(requestError);\n\n      this.allureRuntime.updateTest(this.currentTest, (test) => {\n        test.status = Status.BROKEN;\n        test.stage = Stage.FINISHED;\n        test.statusDetails = {\n          message: errorMsg,\n        };\n      });\n    } else {\n      this.allureRuntime.updateTest(this.currentTest, (test) => {\n        test.status = Status.PASSED;\n        test.stage = Stage.FINISHED;\n      });\n    }\n\n    this.allureRuntime.stopTest(this.currentTest);\n    this.allureRuntime.writeTest(this.currentTest);\n  }\n\n  onTest(err: any, args: { executions: Event[] }) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const execScript = args.executions[0]?.script?.exec?.join(\"\\n\");\n\n    if (!execScript) {\n      return;\n    }\n\n    currentPmItem.testScript = execScript;\n\n    // not typed postman-collection error property ?\n    const testArgs: any = args.executions[0];\n\n    if (!testArgs.error) {\n      return;\n    }\n\n    const errName: string = testArgs.error.name;\n    const errMsg: string = testArgs.error.message;\n\n    const stepUuid = this.allureRuntime.startStep(this.currentTest, undefined, {\n      name: errName,\n      status: Status.FAILED,\n      stage: Stage.FINISHED,\n      statusDetails: {\n        message: errMsg,\n      },\n    });\n\n    if (!stepUuid) {\n      // no such test running, ignore reporting\n      return;\n    }\n\n    currentPmItem.failedAssertions.push(errName);\n\n    this.allureRuntime.stopStep(stepUuid);\n  }\n\n  onConsole(err: any, args: ConsoleEvent) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem || err) {\n      return;\n    }\n\n    if (args.level) {\n      currentPmItem.consoleLogs.push(`level: ${args.level}, messages: ${args.messages.toString()}`);\n    }\n  }\n\n  onRequest(\n    err: any,\n    args: {\n      request: Request;\n      response: Response;\n    },\n  ) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const req = args.request;\n    const url = req.url.toString(true);\n\n    currentPmItem.requestData = {\n      url: url,\n      method: req.method,\n      body: req.body,\n      headers: req.headers,\n    };\n\n    if (err) {\n      currentPmItem.passed = false;\n      currentPmItem.requestError = err.message;\n    }\n\n    if (!args.response) {\n      return;\n    }\n\n    const respStream = args?.response?.stream;\n    const respBody = respStream ? Buffer.from(respStream).toString() : \"\";\n\n    currentPmItem.responseData = {\n      status: args.response.status,\n      code: args.response.code,\n      body: respBody,\n      headers: args.response.headers,\n    };\n  }\n\n  onAssertion(err: any, args: NewmanRunExecutionAssertion) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const stepUuid = this.allureRuntime.startStep(this.currentTest, undefined, {\n      name: args.assertion,\n    });\n    if (!stepUuid) {\n      // no such test running, ignore reporting\n      return;\n    }\n\n    this.allureRuntime.updateStep(stepUuid, (step) => {\n      if (err && currentPmItem) {\n        currentPmItem.passed = false;\n        currentPmItem.failedAssertions.push(args.assertion);\n\n        step.statusDetails = {\n          message: err.message,\n          trace: err.stack,\n        };\n        step.status = Status.FAILED;\n      } else {\n        step.status = Status.PASSED;\n      }\n\n      step.stage = Stage.FINISHED;\n    });\n\n    this.allureRuntime.stopStep(stepUuid);\n  }\n\n  onDone() {\n    if (this.currentScope) {\n      this.allureRuntime.writeScope(this.currentScope);\n      this.currentScope = undefined;\n    }\n  }\n\n  #pathToItem(item: Item): string[] {\n    if (!item || !(typeof item.parent === \"function\") || !(typeof item.forEachParent === \"function\")) {\n      return [];\n    }\n\n    const chain: string[] = [];\n\n    item.forEachParent((parent) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      chain.unshift(parent.name || parent.id);\n    });\n\n    if (this.rootCollectionName) {\n      chain.unshift(this.rootCollectionName);\n    }\n    return chain;\n  }\n\n  #getFullName(item: Item): string {\n    const chain = this.#pathToItem(item);\n\n    return `${chain.join(\"/\")}#${item.name}`;\n  }\n\n  #attachString(name: string, value: string | string[]) {\n    const stringToAttach = Array.isArray(value) ? value.join(\"\\n\") : value;\n\n    if (!stringToAttach) {\n      return;\n    }\n\n    const content = Buffer.from(stringToAttach, \"utf-8\");\n\n    this.allureRuntime.writeAttachment(this.currentTest!, undefined, name, content, {\n      contentType: ContentType.TEXT,\n    });\n  }\n\n  #headerListToJsonBuffer(headers: HeaderList) {\n    const ret: { [k: string]: any } = {};\n\n    headers.all().forEach((h) => {\n      ret[h.key] = h.value;\n    });\n\n    return Buffer.from(JSON.stringify(ret, null, 4), \"utf-8\");\n  }\n\n  #escape(val: string) {\n    return val.replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace('\"', '\"');\n  }\n}\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}